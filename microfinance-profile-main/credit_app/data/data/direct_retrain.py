#!/usr/bin/env python3
"""
Script direct pour r√©entra√Æner le mod√®le de scoring cr√©dit
Utilisez ce script si vous voulez r√©entra√Æner sans passer par l'API
"""

import sys
import os
from retrain_model import CreditScoringRetrainer

def main():
    """Fonction principale"""
    
    # V√©rifier que les fichiers existent
    required_files = ["training_data.csv", "test_data.csv", "validation_data.csv"]
    
    print("üîç V√©rification des fichiers...")
    for file in required_files:
        if not os.path.exists(file):
            print(f"‚ùå Fichier manquant: {file}")
            print("Assurez-vous que les fichiers suivants sont pr√©sents:")
            for f in required_files:
                print(f"  - {f}")
            return False
        else:
            print(f"‚úÖ {file} trouv√©")
    
    # Initialiser le r√©entra√Æneur
    print("\nü§ñ Initialisation du r√©entra√Æneur...")
    retrainer = CreditScoringRetrainer()
    
    try:
        # Lancer le r√©entra√Ænement complet
        print("üöÄ D√©but du r√©entra√Ænement...")
        results = retrainer.retrain_complete_pipeline(
            "training_data.csv",
            "test_data.csv", 
            "validation_data.csv"
        )
        
        # Afficher les r√©sultats
        print("\n" + "="*60)
        print("üéâ R√âENTRA√éNEMENT TERMIN√â AVEC SUCC√àS!")
        print("="*60)
        
        print(f"üìä Status: {results['status']}")
        print(f"üìÖ Timestamp: {results['timestamp']}")
        print(f"üîñ Version du mod√®le: {results['model_version']}")
        print(f"üìà √âchantillons d'entra√Ænement: {results['training_samples']:,}")
        print(f"üéØ Caract√©ristiques utilis√©es: {results['features_used']}")
        
        print("\nüìã M√âTRIQUES SUR LES DONN√âES DE VALIDATION:")
        print("-" * 40)
        val_metrics = results['validation_metrics']
        print(f"  Accuracy:  {val_metrics['accuracy']:.4f}")
        print(f"  Precision: {val_metrics['precision']:.4f}")
        print(f"  Recall:    {val_metrics['recall']:.4f}")
        print(f"  F1-Score:  {val_metrics['f1_score']:.4f}")
        if val_metrics['auc_score']:
            print(f"  AUC:       {val_metrics['auc_score']:.4f}")
        
        print("\nüíæ FICHIERS SAUVEGARD√âS:")
        print("-" * 40)
        print("  üìÅ models/credit_scoring_model.pkl")
        print("  üìÅ models/scaler.pkl")
        print("  üìÅ models/label_encoders.pkl")
        print("  üìÅ models/feature_columns.pkl")
        
        # Sauvegarder les m√©triques dans un fichier JSON
        import json
        metrics_file = f"models/training_metrics_{results['model_version']}.json"
        with open(metrics_file, 'w') as f:
            json.dump(results, f, indent=2)
        print(f"  üìÅ {metrics_file}")
        
        # Sauvegarder aussi comme dernier entra√Ænement
        with open('models/last_training_metrics.json', 'w') as f:
            json.dump(results, f, indent=2)
        print("  üìÅ models/last_training_metrics.json")
        
        print("\n‚úÖ Le mod√®le est pr√™t √† √™tre utilis√©!")
        print("üí° Red√©marrez votre application Flask pour charger le nouveau mod√®le.")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå ERREUR LORS DU R√âENTRA√éNEMENT:")
        print(f"   {str(e)}")
        print("\nüîç V√©rifiez:")
        print("  - Format des fichiers CSV")
        print("  - Pr√©sence des colonnes requises")
        print("  - Qualit√© des donn√©es")
        return False

def show_data_info():
    """Affiche des informations sur les donn√©es"""
    import pandas as pd
    
    print("\nüìä INFORMATIONS SUR LES DONN√âES:")
    print("="*50)
    
    files = {
        "Training": "training_data.csv",
        "Test": "test_data.csv", 
        "Validation": "validation_data.csv"
    }
    
    for name, file in files.items():
        if os.path.exists(file):
            try:
                df = pd.read_csv(file)
                print(f"\nüìã {name} ({file}):")
                print(f"  ‚Ä¢ Lignes: {len(df):,}")
                print(f"  ‚Ä¢ Colonnes: {len(df.columns)}")
                print(f"  ‚Ä¢ Valeurs manquantes: {df.isnull().sum().sum():,}")
                
                # Distribution de la variable cible
                if 'decision_credit' in df.columns:
                    target_dist = df['decision_credit'].value_counts()
                    print(f"  ‚Ä¢ Distribution de decision_credit:")
                    for value, count in target_dist.items():
                        print(f"    - {value}: {count:,} ({count/len(df)*100:.1f}%)")
                
            except Exception as e:
                print(f"  ‚ùå Erreur lors de la lecture: {str(e)}")
        else:
            print(f"\n‚ùå {name} ({file}): Fichier non trouv√©")

def validate_data_structure():
    """Valide la structure des donn√©es"""
    print("\nüîç VALIDATION DE LA STRUCTURE DES DONN√âES:")
    print("="*50)
    
    required_columns = [
        'age', 'sexe', 'situation_familiale', 'nombre_enfants', 'niveau_etude',
        'type_emploi', 'secteur_activite', 'anciennete_emploi', 'type_contrat',
        'revenu_mensuel', 'autres_revenus', 'charges_mensuelles', 'nombre_dependants',
        'anciennete_banque', 'solde_moyen', 'decouvert_frequence', 'incidents_paiement',
        'historique_credit', 'type_credit', 'montant_demande', 'duree_demande',
        'objet_credit', 'garanties_physiques', 'avaliste', 'domiciliation_salaire',
        'utilisation_mobile_banking', 'frequence_transactions', 'epargne_reguliere',
        'participation_tontine', 'verification_identite', 'verification_revenus',
        'score_bureaux_credit', 'region', 'zone_residence', 'taux_endettement',
        'ratio_montant_revenu', 'score_credit', 'niveau_risque', 'decision_credit'
    ]
    
    import pandas as pd
    
    files = ["training_data.csv", "test_data.csv", "validation_data.csv"]
    all_valid = True
    
    for file in files:
        if os.path.exists(file):
            try:
                df = pd.read_csv(file)
                print(f"\nüìã {file}:")
                
                missing_cols = [col for col in required_columns if col not in df.columns]
                extra_cols = [col for col in df.columns if col not in required_columns]
                
                if missing_cols:
                    print(f"  ‚ùå Colonnes manquantes: {missing_cols}")
                    all_valid = False
                
                if extra_cols:
                    print(f"  ‚ö†Ô∏è  Colonnes suppl√©mentaires: {extra_cols}")
                
                if not missing_cols and not extra_cols:
                    print("  ‚úÖ Structure correcte")
                elif not missing_cols:
                    print("  ‚úÖ Toutes les colonnes requises pr√©sentes")
                    
            except Exception as e:
                print(f"  ‚ùå Erreur: {str(e)}")
                all_valid = False
    
    return all_valid

if __name__ == "__main__":
    print("üéØ R√âENTRA√éNEMENT DU MOD√àLE DE SCORING CR√âDIT")
    print("=" * 60)
    
    # V√©rifier les arguments
    if len(sys.argv) > 1:
        if sys.argv[1] == "--info":
            show_data_info()
            sys.exit(0)
        elif sys.argv[1] == "--validate":
            if validate_data_structure():
                print("\n‚úÖ Validation r√©ussie! Vous pouvez proc√©der au r√©entra√Ænement.")
            else:
                print("\n‚ùå Validation √©chou√©e! Corrigez les probl√®mes avant de continuer.")
            sys.exit(0)
        elif sys.argv[1] == "--help":
            print("\nUtilisation:")
            print("  python direct_retrain.py           # R√©entra√Æner le mod√®le")
            print("  python direct_retrain.py --info    # Afficher infos sur les donn√©es")
            print("  python direct_retrain.py --validate # Valider la structure des donn√©es")
            print("  python direct_retrain.py --help    # Afficher cette aide")
            sys.exit(0)
    
    # Validation pr√©alable
    print("1Ô∏è‚É£ Validation de la structure des donn√©es...")
    if not validate_data_structure():
        print("\n‚ùå Validation √©chou√©e! Corrigez les probl√®mes avant de continuer.")
        sys.exit(1)
    
    # Afficher les informations sur les donn√©es
    show_data_info()
    
    # Demander confirmation
    print("\n‚ö†Ô∏è  ATTENTION: Le r√©entra√Ænement va remplacer le mod√®le actuel.")
    response = input("Voulez-vous continuer? (oui/non): ").lower().strip()
    
    if response not in ['oui', 'o', 'yes', 'y']:
        print("‚ùå R√©entra√Ænement annul√©.")
        sys.exit(0)
    
    # Lancer le r√©entra√Ænement
    print("\n2Ô∏è‚É£ D√©but du r√©entra√Ænement...")
    success = main()
    
    if success:
        print("\nüéâ R√âENTRA√éNEMENT TERMIN√â AVEC SUCC√àS!")
        sys.exit(0)
    else:
        print("\n‚ùå R√âENTRA√éNEMENT √âCHOU√â!")
        sys.exit(1) 
        print("-" * 40)
        test_metrics = results['test_metrics']
        print(f"  Accuracy:  {test_metrics['accuracy']:.4f}")
        print(f"  Precision: {test_metrics['precision']:.4f}")
        print(f"  Recall:    {test_metrics['recall']:.4f}")
        print(f"  F1-Score:  {test_metrics['f1_score']:.4f}")
        if test_metrics['auc_score']:
            print(f"  AUC:       {test_metrics['auc_score']:.4f}")
        
        print("\nüìã M√âTRIQUES SUR LES DONN√âES DE test:")